import mysql.connector
from mysql.connector import errorcode

# Database credentials
HOST = "localhost"
USER = "root"
PASSWORD = "root"
DATABASE = "airline_db"

def create_connection():
    try:
        connection = mysql.connector.connect(
            host=HOST,
            user=USER,
            passwd=PASSWORD
        )
        print("Connection to MySQL server established.")
        return connection
    except mysql.connector.Error as err:
        print(f"Error: {err}")
        return None

def create_database(connection):
    cursor = connection.cursor()
    try:
        cursor.execute(f"CREATE DATABASE IF NOT EXISTS {DATABASE}")
        print(f"Database '{DATABASE}' created or already exists.")
    except mysql.connector.Error as err:
        print(f"Failed to create database: {err}")
    finally:
        cursor.close()

def create_table(connection):
    cursor = connection.cursor()
    try:
        cursor.execute(f"USE {DATABASE}")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS tweets (
                id INT AUTO_INCREMENT PRIMARY KEY,
                tweet_id BIGINT NOT NULL,
                user_name VARCHAR(50) NOT NULL,
                tweet_text TEXT NOT NULL,
                tweet_time DATETIME NOT NULL,
                airline VARCHAR(50) NOT NULL,
                sentiment VARCHAR(20) NOT NULL,
                INDEX (tweet_time),
                INDEX (airline),
                INDEX (sentiment)
            )
        """)
        print("Table 'tweets' created or already exists.")
    except mysql.connector.Error as err:
        print(f"Failed to create table: {err}")
    finally:
        cursor.close()

def insert_data(connection):
    cursor = connection.cursor()
    try:
        cursor.execute(f"USE {DATABASE}")
        cursor.execute("""
            INSERT INTO tweets (tweet_id, user_name, tweet_text, tweet_time, airline, sentiment)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (1234567890, 'user1', 'This is a sample tweet', '2024-07-08 12:00:00', 'Airline1', 'positive'))
        connection.commit()
        print("Data inserted into 'tweets' table.")
    except mysql.connector.Error as err:
        print(f"Failed to insert data: {err}")
        connection.rollback()
    finally:
        cursor.close()

def retrieve_data(connection):
    cursor = connection.cursor()
    try:
        cursor.execute(f"USE {DATABASE}")
        cursor.execute("SELECT * FROM tweets")
        rows = cursor.fetchall()
        for row in rows:
            print(row)
    except mysql.connector.Error as err:
        print(f"Failed to retrieve data: {err}")
    finally:
        cursor.close()

def update_data(connection):
    cursor = connection.cursor()
    try:
        cursor.execute(f"USE {DATABASE}")
        cursor.execute("""
            UPDATE tweets 
            SET tweet_text = 'Updated tweet text'
            WHERE tweet_id = 1234567890
        """)
        connection.commit()
        print("Data updated in 'tweets' table.")
    except mysql.connector.Error as err:
        print(f"Failed to update data: {err}")
        connection.rollback()
    finally:
        cursor.close()

def delete_data(connection):
    cursor = connection.cursor()
    try:
        cursor.execute(f"USE {DATABASE}")
        cursor.execute("DELETE FROM tweets WHERE tweet_id = 1234567890")
        connection.commit()
        print("Data deleted from 'tweets' table.")
    except mysql.connector.Error as err:
        print(f"Failed to delete data: {err}")
        connection.rollback()
    finally:
        cursor.close()

def main():
    connection = create_connection()
    if connection:
        create_database(connection)
        create_table(connection)
        insert_data(connection)
        retrieve_data(connection)
        update_data(connection)
        delete_data(connection)
        connection.close()

if __name__ == "__main__":
    main()
